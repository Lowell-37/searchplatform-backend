{
  "code": 0,
  "data": {
    "records": [
      {
        "id": "1724012220511285249",
        "title": "智能BI项目笔记如何处理CompletableFuture中的异常",
        "description": null,
        "content": "**当前问题分析：**\n    \n在智能BI项目中，使用CompletableFuture进行并发编程，但是这里如果出现异常就会导致图表的状态一直是wait状态，前端渲染的图表数据就会一直显示在等待中。所以就要捕获异常然后更新图表的状态为failed。\n    \n**异常情况分析：**\n\n这里的代码会出现两种异常，一种是提交的多线程中线程执行任务时出现异常还有一种是在主线程中使用CompletableFuture方法出现的异常（比如任务队列已满然后继续向队列中添加任务）\n\n**原代码**\n```java\n CompletableFuture.runAsync(() -> {\n    //这里只展示部分相关代码，其他项目中详细的代码未写\n    //插入数据库，更新图表为running状态\n    Chart updateChart = new Chart();\n    updateChart.setId(chart.getId());\n    updateChart.setStatus(ChartStatusEnum.RUNNING.getValue());\n    chartService.updateById(updateChart);\n    //调用AI\n    ......\n    //对AI结果进行处理，插入数据库，将图表更新为success状态\n    updateChartResult.setStatus(ChartStatusEnum.SUCCESS.getValue());\n    chartService.updateById(updateChartResult);\n}, threadPoolExecutor);\n```\n**这里针对异常情况有两个问题**\n\n1.当提交的线程中如果出现异常，就会导致图表的状态一直卡在wait或者running状态，解决方式：使用CompletableFuture的exceptionally方法处理异常\n代码示例：\n```java\nCompletableFuture.runAsync(() -> {\n    //这里只展示部分相关代码，其他项目中详细的代码未写\n    //插入数据库，更新图表为running状态\n    Chart updateChart = new Chart();\n    updateChart.setId(chart.getId());\n    updateChart.setStatus(ChartStatusEnum.RUNNING.getValue());\n    chartService.updateById(updateChart);\n    //调用AI\n    ......\n    //对AI结果进行处理，插入数据库，将图表更新为success状态\n    updateChartResult.setStatus(ChartStatusEnum.SUCCESS.getValue());\n    chartService.updateById(updateChartResult);\n}, threadPoolExecutor).exceptionally(new Function<Throwable, Void>() {\n    @Override\n    public Void apply(Throwable throwable) {\n        //该方法中是处理异常情况，所以将图表更新为failed状态\n       Chart updateChartResult = new Chart();\n       updateChartResult.setId(chart.getId());\n       updateChartResult.setStatus(ChartStatusEnum.FAILED.getValue());\n       updateChartResult.setExecMessage(\"系统内部异常\"\");\n        return null;\n    }\n});\n```\n2.使用CompletableFuture.runAsync()方法出现的异常，比如队列已满继续添加任务出现的异常，这种情况下出现异常也会导致图表一直卡在wait状态，不能进入最终态falied或者success。这种解决方式就不能使用exceptionally方法了，就要使用try-catch捕获处理。\n\n**代码如下：**\n```java\ntry {\n    CompletableFuture.runAsync(() -> {\n        //这里只展示部分相关代码，其他项目中详细的代码未写\n        //插入数据库，更新图表为running状态\n        Chart updateChart = new Chart();\n        updateChart.setId(chart.getId());\n        updateChart.setStatus(ChartStatusEnum.RUNNING.getValue());\n        chartService.updateById(updateChart);\n        //调用AI\n        ......\n        //对AI结果进行处理，插入数据库，将图表更新为success状态\n        updateChartResult.setStatus(ChartStatusEnum.SUCCESS.getValue());\n        chartService.updateById(updateChartResult);\n    }, threadPoolExecutor);\n} catch (Exception e) {\n    //该方法中是处理异常情况，所以将图表更新为failed状态\n    Chart updateChartResult = new Chart();\n    updateChartResult.setId(chart.getId());\n    updateChartResult.setStatus(ChartStatusEnum.FAILED.getValue());\n    updateChartResult.setExecMessage(\"队列已满导致失败\");\n}\n```\n**汇总以上两种异常方式的代码处理如下：**\n```java\nCompletableFuture.runAsync(() -> {\n        //这里只展示部分相关代码，其他项目中详细的代码未写\n        //插入数据库，更新图表为running状态\n        Chart updateChart = new Chart();\n        updateChart.setId(chart.getId());\n        updateChart.setStatus(ChartStatusEnum.RUNNING.getValue());\n        chartService.updateById(updateChart);\n        //调用AI\n        ......\n        //对AI结果进行处理，插入数据库，将图表更新为success状态\n        updateChartResult.setStatus(ChartStatusEnum.SUCCESS.getValue());\n        chartService.updateById(updateChartResult);\n    }, threadPoolExecutor).exceptionally(new Function<Throwable, Void>() {\n    @Override\n    public Void apply(Throwable throwable) {\n        //该方法中是处理异常情况，所以将图表更新为failed状态\n       Chart updateChartResult = new Chart();\n       updateChartResult.setId(chart.getId());\n       updateChartResult.setStatus(ChartStatusEnum.FAILED.getValue());\n       updateChartResult.setExecMessage(\"系统内部异常\");\n        return null;\n    }\n});\n} catch (Exception e) {\n    //该方法中是处理异常情况，所以将图表更新为failed状态\n    Chart updateChartResult = new Chart();\n    updateChartResult.setId(chart.getId());\n    updateChartResult.setStatus(ChartStatusEnum.FAILED.getValue());\n    updateChartResult.setExecMessage(\"队列已满导致失败\");\n}\n```\n**总结：**\n\n1.队列已满继续添加任务出现的异常在外层使用trycatch来捕获处理，不能使用exceptionally方法处理。\n2.线程中出现异常可以使用exceptionally方法进行处理。\n\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 5,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1696714393049473025",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-11-13T10:31:58.000+00:00",
        "updateTime": "2023-11-14T03:03:17.000+00:00",
        "user": {
          "id": "1696714393049473025",
          "planetCode": "26376",
          "userName": "氵",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKAEzsyJthMibHnNib4WLX8wOgAjRgt9uWGANvficO5TI8uHyHSicoc7Dg6PO5NsfYWXmoSMEjlMdxPBQ/132",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": null,
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-08-28T12:39:03.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-08-30T02:40:09.000+00:00",
          "updateTime": "2023-11-13T13:08:11.000+00:00"
        },
        "tags": [
          "文章",
          "笔记"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1724000372172910593",
        "title": "Spring事务与分布式事务",
        "description": "介绍Spring 事务以及分布式事务的知识点",
        "content": "## 一、事务的具体定义\n\n事务提供一种机制将一个活动涉及的所有操作纳入到一个不可分割的执行单元，组成事务的所有操作只有在所有操作均能正常执行的情况下方能提交，只要其中任一操作执行失败（出现异常），都将导致整个事务的回滚。简单地说，事务提供一种“**要么什么都不做，要么做全套（All or Nothing）**”机制。\n\n- **原子性（Atomicity）：** 一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚。\n- **一致性（Consistency）**：**数据库总是从一个一致性的状态转换到另一个一致性的状态**。在事务开始前后，数据库的完整性约束没有被破坏。例如违反了唯一性，必须撤销事务，返回初始状态。\n- **隔离性（Isolation）：** 每个读写事务的对象对其他事务的操作对象能相互分离，即：事务提交前的数据对其他事务是不可见的，通常内部加锁实现。不同的隔离级别加不同的锁。\n- **持久性（Durability）：** 一旦事务提交，则其所做的修改会永久保存到数据库。\n\n\n\n## 二、并发环境下的数据库事务\n\n### 2.1 事务并发执行会出现的问题\n\n我们先来看一下事务并发，数据库可能会出现的问题：\n\n- **更新丢失（问题严重）  **\n\n    当有两个并发执行的事务，更新同一行数据，那么有可能一个操作会把另一个操作的更新数据覆盖掉。\n- **脏读 （问题严重）  **\n\n    一个事务读到另一个尚未提交的事务中的数据，即读到了事务的处理过程中的数据，而不是结果数据。 该数据可能会被回滚从而失效。 如果第一个事务拿着失效的数据去处理那就发生错误了。\n- 不可重复读 （一般来说可以接受，比如你交话费，交完就查看可能没到账，过2分钟再查就到账了）  \n\n    不可重复读的含义：一个事务对同一行数据读了两次，却得到了不同的结果。它具体分为如下两种情况：  \n\n    虚读：在事务1两次读取同一记录的过程中，事务2对该记录进行了修改，从而事务1第二次读到了不一样的记录。  \n\n    幻读：事务1在两次查询的过程中，事务2对该表进行了插入、删除操作，从而事务1第二次查询的结果数量发生了变化。\n\n> 不可重复读 与 脏读 的区别？  \n脏读读到的是尚未提交的数据，而不可重复读读到的是已经提交的数据，只不过在两次读的过程中数据被另一个事务改过了。\n\n### 2.2如何解决并发过程中事务问题（事务隔离）\n\n数据库一共有如下四种隔离级别：\n\n- Read uncommitted 读未提交  \n\n    在该级别下，一个事务对一行数据修改的过程中，不允许另一个事务对该行数据进行修改，但允许另一个事务对该行数据读。  \n\n    因此本级别下，不会出现更新丢失，但会出现脏读、不可重复读。\n- Read committed 读提交 （oracle、sqlserver默认的隔离级别）  \n\n    在该级别下，未提交的写事务不允许其他事务访问该行，因此**不会出现脏读**；但是读取数据的事务允许其他事务的访问该行数据，因此会出现不可重复读的情况。\n- Repeatable read 重复读 （mysql的默认隔离级别）  \n\n    简单说就是：一个事务开始读或写数据时，不允许其他事务对该数据进行修改。在该级别下，读事务禁止写事务，但允许读事务，因此不会出现同一事务两次读到不同的数据的情况（不可重复读），且写事务禁止其他一切事务。**这个级别无法解决幻读问题**。\n- Serializable 序列化  \n\n    该级别要求所有事务都必须串行执行，因此能避免一切因并发引起的问题，但效率很低\n\n隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为Read Committed。它能够避免脏读取，而且具有较好的并发性能。尽管它会导致不可重复读、幻读这些并发问题，**应该由应用程序员采用悲观锁或乐观锁来控制。**\n\n\n\n## 三、Spring事务传播行为\n\n事务传播行为用来描述由某一个事务传播行为修饰的方法被嵌套进另一个方法的时事务如何传播。\n\n```Java\nServiceA {\n         @Transactional(Propagation=XXX)\n         void methodA() {\n             //其他持久层操作数据库\n             ServiceB.methodB();\n         }\n}\n      \nServiceB {\n         @Transactional(Propagation=YYY)\n         void methodB() {\n            //持久层操作数据库\n         }\n}\n```\n\n代码中`methodA()`方法嵌套调用了`methodB()`方法，`methodB()`的事务传播行为由`@Transactional(Propagation=YYY)`设置决定。\n\n### Spring中七种事务传播行为\n\n|事务传播行为类型|说明|\n|-|-|\n|PROPAGATION_REQUIRED|如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。|\n|PROPAGATION_SUPPORTS|支持当前事务，如果当前没有事务，就以非事务方式执行。|\n|PROPAGATION_MANDATORY|使用当前的事务，如果当前没有事务，就抛出异常。|\n|PROPAGATION_REQUIRES_NEW|新建事务，如果当前存在事务，把当前事务挂起。|\n|PROPAGATION_NOT_SUPPORTED|以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。|\n|PROPAGATION_NEVER|以非事务方式执行，如果当前存在事务，则抛出异常。|\n|PROPAGATION_NESTED|如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。|\n\n\n## 四、Spring @Transactional 注解\n\n新建的`Spring Boot`项目中，一般都会引用`spring-boot-starter`或者`spring-boot-starter-web`，而这两个起步依赖中都已经包含了对于`spring-boot-starter-jdbc`或`spring-boot-starter-data-jpa`的依赖。 当我们使用了这两个依赖的时候，框架会自动默认分别注入`DataSourceTransactionManager`或`JpaTransactionManager`。\n\n所以我们不需要任何额外配置就可以用`@Transactional`注解进行事务的管理。在spring框架内实现多个数据库持久层操作的事务，我们只需要在方法或类添加`@Transactional`注解即可。@**Transactional注解只能应用到public可见度的方法上**，可以被应用于接口定义和接口方法，方法会覆盖类上面声明的事务。\n\n```Java\n@Transactional\npublic int xxx(){\n    // 增删改持久层操作一\n    // 增删改持久层操作二\n    // ……\n}\n​\n```\n\n当多个持久层操作在同一个Service层方法上时，能保证多个持久层操作要么都成功，要么都失败。\n\n|||\n|-|-|\n|value|当在配置文件中有多个 TransactionManager , 可以用该属性指定选择哪个事务管理器。|\n|propagation|事务的传播行为，默认值为 REQUIRED。|\n|isolation|事务的隔离度，默认值采用 DEFAULT。|\n|timeout|事务的超时时间，默认值为-1。如果超过该时间限制但事务还没有完成，则自动回滚事务。|\n|read-only|指定事务是否为只读事务，默认值为 false；为了忽略那些不需要事务的方法，比如读取数据，可以设置 read-only 为 true。|\n|rollback-for|用于指定能够触发事务回滚的异常类型，如果有多个异常类型需要指定，各类型之间可以通过逗号分隔。|\n|no-rollback- for|抛出 no-rollback-for 指定的异常类型，不回滚事务。|\n\n\n## 五、分布式事务\n\n分布式事务分为两种：跨服务的分布式事务，跨库的分布式事务。\n\n### 5.1.跨库的分布式事务\n\n跨库的分布式事务：一个服务层函数，需要同时操作两个数据库。我们之前给大家讲的例子都是这一种，实际上总的思路：**就是有一个“事务管理器”对象统一管理多个数据源事务的提交与回滚**。事务管理器协调多数据源进行两段式提交。\n\n![image.png](https://pic.code-nav.cn/post_picture/1612112775822180354/Sv3SoIfC-image.png)\n\n为了大家方便理解：我以小故事方式给大家讲一下两段式提交：\n\n- 背景：以缉毒警察抓捕专案毒贩为背景，目前3位毒贩A、B、C分别住在不同的住址，目前要实施抓捕。将缉毒大队分成三个组，组A、组B、组C分别针对毒贩A、B、C，三个小组统一由“缉毒大队长”协调指挥。\n    - 三名毒贩住在不同的住址，体现的是“分布式”，3个数据库\n    - “缉毒大队长”代表的是“事务管理器”TransctionManager，负责抓捕这个事务的协调指挥工作。\n    - 三个抓捕小组，代表的是XAResourceManager，是XA/JTA两阶段提交规范的单一资源操作的执行者。\n- 抓捕的要求是：把三名毒贩同时抓获，不能先抓A，如果A抓捕失败打草惊蛇，可能给B、C报信。要么就全抓到，要么就一个也别抓，免得打草惊蛇。\n    - 抓捕的要求和我们对于“分布式”事务的要求是一样的，多数据库操作要么都成功，要么都失败。\n- 抓捕的步骤：\n    - 第一步：三个小组分别靠近毒贩A、B、C的住址，然后等待“缉毒大队长”协调指挥。“缉毒大队长”询问A小组是否完成准备抓捕工作，A小组回复：准备完毕。以此类推，“缉毒大队长”询问B、C两个抓捕小组，这三个组都准备完成了，并且没有异常情况发生，第一阶段工作完毕。即：**两阶段提交的第一阶段：预提交**。\n    - 如果任何一个小组发现异常，整个行动计划立刻取消。三个抓捕小组同时收队，这个可以认为是数据库事务回滚。\n    - 第二步：三个小组已经全部准备好了，“缉毒大队长”下命令：“抓捕”。三个抓捕小组同时行动，分别抓捕三名毒贩。确保全部落网，一个也跑不掉。这就好比**事务两阶段提交的第二阶段：整体提交**。\n\n### 5.2.跨服务的分布式事务\n\n跨服务分布式事务: 也就是说我在做一个服务A的时候，需要通过HTTP网络请求调用多个其他服务，有可能第一个服务B成功了，第二个服务C执行失败了。我们期望的结果是：服务B和服务C都成功。这种分布式单纯的依靠数据库层面就很难解决了。\n\n\n\n\n![image.png](https://pic.code-nav.cn/post_picture/1612112775822180354/ams0OHno-image.png)\n\n这种情况一般都是通过最终一致性的方式解决。比如：通过MQ消息队列，给服务B发消息，服务B执行，然后真的做持久化操作数据入库了。\n\n---\n\n\n\n![image.png](https://pic.code-nav.cn/post_picture/1612112775822180354/fjkPs0CY-image.png)\n给服务C发消息，如果服务C执行失败，这个消息就会存在MQ里面，依照一定的策略还会发给服务C，直到服务C成功为止。这种策略被叫做“ Exactly-once”，精确的保证成功一次并且只成功一次。这样保障操作结果的最终一致性。",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1612112775822180354/1fbD1DvP-image.png",
        "language": null,
        "viewNum": 7,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1612112775822180354",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-11-13T09:44:53.000+00:00",
        "updateTime": "2023-11-14T02:26:27.000+00:00",
        "user": {
          "id": "1612112775822180354",
          "planetCode": "4838",
          "userName": "小火龙",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1612112775822180354/4fsjvVfu-R.jpg",
          "gender": 1,
          "userProfile": "计算机科学与技术专业本科在读，热爱生活，热爱技术。",
          "userRole": "vip",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": null,
          "major": "计算机科学与技术",
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "实习",
          "github": null,
          "blog": null,
          "score": 35,
          "coin": 270,
          "followeeNum": 8,
          "followNum": 1,
          "followStatus": null,
          "vipExpireTime": "2024-02-01T01:02:21.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-01-08T15:43:32.000+00:00",
          "updateTime": "2023-11-03T02:44:14.000+00:00"
        },
        "tags": [
          "文章"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1723986011937173506",
        "title": "开发企业微信群机器人，实现定时提醒",
        "description": null,
        "content": "<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">大家好，我是鱼皮，今天分享一个用程序解决生活工作问题的真实案例。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">说来惭愧，事情是这样的，在我们公司，每天都要轮流安排一名员工（当然也包括我）去楼层中间一个很牛的饮水机那里接水。但由于大家每天都有自己的工作，经常出现忘记接水的情况，导致大家口渴难耐。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">怎么解决这个问题呢？</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">我想到了几种方法：</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">1）每天大家轮流提醒。但是别说提醒别人了，自己都不记得什么时候轮到自己接水。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">2）由一个员工负责提醒大家接水，必要时招募一个 “接水提醒员”。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">3）在企业微信的日历功能给员工安排接水日程，就像下面这样：</p>\n<figure data-tool=\"mdnice编辑器\" style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;\"><img src=\"https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/image-20231014144412018.png\" alt style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 4px; margin-bottom: 25px;\"></figure>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">但问题是我们的人数和天数不是完全对应的、反复安排日程也很麻烦。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">你觉得上面哪种方案好呢？其实我觉得第二个方案是最好的 —— 招募一个 “接水提醒员”。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">别笑，我认真的！</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">只不过这个 “接水提醒员” 何必是人？</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">没错，作为一名程序员，我们可以搞一个机器人，让它在企业微信群聊中每天提醒不同的员工去接水即可。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">其实这个功能和员工排班打卡系统是很类似的，只不过更轻量一些。我也调研了很多排班系统，但是都要收费，索性自己开发一个好了。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">在企业微信中接入机器人其实非常简单，因为企业微信官方就支持群聊机器人功能，所以这次的任务我就安排给了实习生，他很快就完成了，所以我相信大家应该也都能学会~</p>\n<h2 data-tool=\"mdnice编辑器\" style=\"padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://files.mdnice.com/koala-2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 50px; margin-top: 1em; margin-bottom: 10px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"text-align: center; display: inline-block; height: 38px; line-height: 42px; color: #48b378; background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;\">企微群聊机器人开发</span><span class=\"suffix\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">学习开发第三方应用时，一定要先完整阅读官方文档，比如企业微信群机器人配置文档。</p>\n<blockquote class=\"multiquote-1\" data-tool=\"mdnice编辑器\" style=\"border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: #FBF9FD; border-left: 3px solid #35b378; display: block;\">\n<p style=\"padding-bottom: 8px; padding-top: 1em; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);\">指路：https://developer.work.weixin.qq.com/document/path/99110</p>\n</blockquote>\n<figure data-tool=\"mdnice编辑器\" style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;\"><img src=\"https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/image-20231014145353399.png\" alt style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 4px; margin-bottom: 25px;\"></figure>\n<h3 data-tool=\"mdnice编辑器\" style=\"margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin-top: 1.2em;\"><span style=\"background-image: url(https://files.mdnice.com/koala-3.png); background-size: 100% 100%; background-repeat: no-repeat; display: inline-block; width: 16px; height: 15px; line-height: 15px; margin-bottom: -1px;\"></span><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 17px; font-weight: bold; display: inline-block; margin-left: 8px; color: #48b378;\">设计 SDK 结构</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">虽然我们的目标是做一个提醒接水机器人，但是企业微信群聊机器人其实是一个通用的功能，所以我们决定开发一个企微机器人 SDK，以后公司其他业务需要时都能够快速复用。（比如开发一个定时喝水提醒机器人）</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">设计好 SDK 是需要一定技巧的，之前给大家分享过：<a href=\"https://mp.weixin.qq.com/s?__biz=MzI1NDczNTAwMA==&amp;mid=2247500703&amp;idx=1&amp;sn=bf4122b470fa6cccc1f005b6772a68f2&amp;scene=21#wechat_redirect\" style=\"word-wrap: break-word; font-weight: bold; color: #48b378; text-decoration: none; border-bottom: 1px solid #48b378;\">如何设计一个优秀的 SDK</a> ，可以阅读参考。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">在查阅企微机器人文档后，了解到企业微信机器人支持发送多种类型的消息，包括文本、 Markdown 、图片、图文、文件、语音和模块卡片等，文档中对每一种类型的请求参数和字段含义都做了详尽的解释。</p>\n<blockquote class=\"multiquote-1\" data-tool=\"mdnice编辑器\" style=\"border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: #FBF9FD; border-left: 3px solid #35b378; display: block;\">\n<p style=\"padding-bottom: 8px; padding-top: 1em; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);\">吐槽一下，跟微信开发者文档比起来，企微机器人的文档写得清晰多了！</p>\n</blockquote>\n<figure data-tool=\"mdnice编辑器\" style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;\"><img src=\"https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/image-20231014145911630.png\" alt=\"企微文本消息格式\" style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 4px; margin-bottom: 25px;\"><figcaption style=\"margin-top: 5px; text-align: center; color: #888; display: block; font-size: 12px; font-family: PingFangSC-Light;\">企微文本消息格式</figcaption></figure>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">由于每种消息最终都是要转换成 JSON 格式作为 HTTP 请求的参数的，所以我们可以设计一个基础的消息类（Message）来存放公共参数，然后定义各种不同的具体消息类来集成它（比如文本消息 TextMessage、Markdown 消息 MarkdownMessage 等）。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">为了简化开发者使用 SDK 来发送消息，定义统一的 MessageSender 类，在类中提供发送消息的方法（比如发送文本消息 sendText），可以接受 Message 并发送到企业微信服务器。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">最终，客户端只需调用统一的消息发送方法即可。SDK 的整体结构如下图所示：</p>\n<figure data-tool=\"mdnice编辑器\" style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;\"><img src=\"https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/1697195145097-6b77f8c8-dcd5-4904-b211-badac72e7a9c.png\" alt style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 4px; margin-bottom: 25px;\"></figure>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">值得一提的是，如果要制作更通用的消息发送 SDK。可以将 MessageSender 定义成接口，编写不同的子类比如飞书 MessageSender、短信 MessageSender 等。</p>\n<h3 data-tool=\"mdnice编辑器\" style=\"margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin-top: 1.2em;\"><span style=\"background-image: url(https://files.mdnice.com/koala-3.png); background-size: 100% 100%; background-repeat: no-repeat; display: inline-block; width: 16px; height: 15px; line-height: 15px; margin-bottom: -1px;\"></span><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 17px; font-weight: bold; display: inline-block; margin-left: 8px; color: #48b378;\">开发 SDK</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">做好设计之后，接下来就可以开始开发 SDK 了。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">步骤如下：</p>\n<ol data-tool=\"mdnice编辑器\" style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: decimal;\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;\">获取 webhook</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;\">创建 SDK 项目</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;\">编写代码</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;\">SDK 打包</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;\">调用 SDK</section></li></ol>\n<h3 data-tool=\"mdnice编辑器\" style=\"margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin-top: 1.2em;\"><span style=\"background-image: url(https://files.mdnice.com/koala-3.png); background-size: 100% 100%; background-repeat: no-repeat; display: inline-block; width: 16px; height: 15px; line-height: 15px; margin-bottom: -1px;\"></span><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 17px; font-weight: bold; display: inline-block; margin-left: 8px; color: #48b378;\">1、获取 webhook</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">首先，必须在企业微信群聊中创建一个企业微信机器人，并获取机器人的 webhook。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">webhook 是一个 url 地址，用于接受我们开发者自己服务器的请求，从而控制企业微信机器人。后续所有的开发过程，都需要通过 webhook 才可以实现。</p>\n<figure data-tool=\"mdnice编辑器\" style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;\"><img src=\"https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/image-20231014151024421.png\" alt style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 4px; margin-bottom: 25px;\"></figure>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">复制并保存好这个 Webhook 地址，注意不要泄露该地址！</p>\n<figure data-tool=\"mdnice编辑器\" style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;\"><img src=\"https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/1697194222438-40e7e7a8-3264-4844-b995-14183a0115f2.png\" alt style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 4px; margin-bottom: 25px;\"></figure>\n<h3 data-tool=\"mdnice编辑器\" style=\"margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin-top: 1.2em;\"><span style=\"background-image: url(https://files.mdnice.com/koala-3.png); background-size: 100% 100%; background-repeat: no-repeat; display: inline-block; width: 16px; height: 15px; line-height: 15px; margin-bottom: -1px;\"></span><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 17px; font-weight: bold; display: inline-block; margin-left: 8px; color: #48b378;\">2、创建 SDK 项目</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">SDK 通常是一个很干净的项目，此处我们使用 Maven 来构建一个空的项目，并在 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #28ca71;\">pom.xml</code>  文件中配置项目信息。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">需要特别注意的是，既然我们正在创建一个 SDK，这意味着它将被更多的开发者使用。因此，在配置 groupId 和 artifactId 时，我们应当遵循以下规范：</p>\n<ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;\">\n<li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;\">groupId：它是项目组织或项目开发者的唯一标识符，其实际对应的是 main 目录下的 Java 目录结构。</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;\">artifactId：它是项目的唯一标识符，对应的是项目名称，即项目的根目录名称。通常，它应当为纯小写，并且多个词之间使用中划线（-）隔开。</section></li><li><section style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;\">version：它指定了项目的当前版本。其中，SNAPSHOT 表示该项目仍在开发中，是一个不稳定的版本。</section></li></ul>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">以下是我们配置好的项目信息：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;\"><span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">groupId</span>&gt;</span>com.yupi<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;/<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">groupId</span>&gt;</span><br><span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">artifactId</span>&gt;</span>rtx-robot<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;/<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">artifactId</span>&gt;</span><br><span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;/<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">version</span>&gt;</span><br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">为了让我们的项目更加易用，我们还要能做到让开发者通过配置文件来传入配置（比如 webhook），而不是通过硬编码重复配置各种信息。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">所以此处我们把项目只作为 Spring Boot 的 starter，需要在 pom.xml 文件中引入依赖：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;\"><span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">dependency</span>&gt;</span><br>&nbsp;&nbsp;<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;/<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">groupId</span>&gt;</span><br>&nbsp;&nbsp;<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;/<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">artifactId</span>&gt;</span><br><span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;/<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">dependency</span>&gt;</span><br><span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">dependency</span>&gt;</span><br>&nbsp;&nbsp;<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;/<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">groupId</span>&gt;</span><br>&nbsp;&nbsp;<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;/<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">artifactId</span>&gt;</span><br>&nbsp;&nbsp;<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">optional</span>&gt;</span>true<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;/<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">optional</span>&gt;</span><br><span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;/<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">dependency</span>&gt;</span><br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">最后，我们还需要添加一个配置，配置项  <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #28ca71;\">&lt;skip&gt;true&lt;/skip&gt;</code>  表示跳过执行该插件的默认行为：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;\"><span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">build</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">plugins</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">plugin</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;/<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">groupId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;/<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">artifactId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">configuration</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">skip</span>&gt;</span>true<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;/<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">skip</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;/<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">configuration</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;/<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">plugin</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;/<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">plugins</span>&gt;</span><br><span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;/<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">build</span>&gt;</span><br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">这样，一个 SDK 项目的初始依赖就配置好了。</p>\n<h3 data-tool=\"mdnice编辑器\" style=\"margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin-top: 1.2em;\"><span style=\"background-image: url(https://files.mdnice.com/koala-3.png); background-size: 100% 100%; background-repeat: no-repeat; display: inline-block; width: 16px; height: 15px; line-height: 15px; margin-bottom: -1px;\"></span><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 17px; font-weight: bold; display: inline-block; margin-left: 8px; color: #48b378;\">3、编写配置类</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">现在我们就可以按照之前设计的结构开发了。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">首先，我们要写一个配置类，用来接受开发者在配置文件中写入的 webhook。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">同时，我们可以在配置类中，将需要被调用的 MessageSender 对象 Bean 自动注入到 IOC 容器中，不用让开发者自己 new 对象了。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">示例代码如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;\"><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Configuration</span><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@ConfigurationProperties</span>(prefix&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"wechatwork-bot\"</span>)<br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@ComponentScan</span><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Data</span><br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">WebhookConfig</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">private</span>&nbsp;String&nbsp;webhook;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Bean</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;RtxRobotMessageSender&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">rtxRobotMessageSender</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;RtxRobotMessageSender(webhook);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">接下来，为了让 Spring Boot 项目在启动时能自动识别并应用配置类，需要把配置类写入到 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #28ca71;\">resources/META-INF/spring.factories </code> 文件中，示例代码如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.yupi.rtxrobot.config.WebhookConfig<br></code></pre>\n<h3 data-tool=\"mdnice编辑器\" style=\"margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin-top: 1.2em;\"><span style=\"background-image: url(https://files.mdnice.com/koala-3.png); background-size: 100% 100%; background-repeat: no-repeat; display: inline-block; width: 16px; height: 15px; line-height: 15px; margin-bottom: -1px;\"></span><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 17px; font-weight: bold; display: inline-block; margin-left: 8px; color: #48b378;\">4、编写消息类</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">接下来，我们要按照官方文档的请求参数把几种类型的消息对象编写好。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">由于每个消息类都有一个固定的字段 msgtype，所以我们定义一个基类 Message，方便后续将不同类型的消息传入统一的方法：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">Message</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;消息类型<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;msgtype;<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">接下来编写具体的消息类，比如纯文本类型消息 TextMessage，示例代码如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;\"><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Data</span><br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">TextMessage</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">Message</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;消息内容<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">private</span>&nbsp;String&nbsp;content;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;被提及者userId列表<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">private</span>&nbsp;List&lt;String&gt;&nbsp;mentionedList;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;被提及者电话号码列表<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">private</span>&nbsp;List&lt;String&gt;&nbsp;mentionedMobileList;<br>&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;提及全体<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">private</span>&nbsp;Boolean&nbsp;mentionAll&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">false</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">TextMessage</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;content,&nbsp;List&lt;String&gt;&nbsp;mentionedList,&nbsp;List&lt;String&gt;&nbsp;mentionedMobileList,&nbsp;Boolean&nbsp;mentionAll)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.content&nbsp;=&nbsp;content;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.mentionedList&nbsp;=&nbsp;mentionedList;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.mentionedMobileList&nbsp;=&nbsp;mentionedMobileList;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.mentionAll&nbsp;=&nbsp;mentionAll;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(mentionAll)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(CollUtil.isNotEmpty(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.mentionedList)&nbsp;||&nbsp;CollUtil.isNotEmpty(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.mentionedMobileList))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(CollUtil.isNotEmpty(mentionedList))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.mentionedList.add(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"@all\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.mentionedList&nbsp;=&nbsp;CollUtil.newArrayList(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"@all\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.mentionedList&nbsp;=&nbsp;CollUtil.newArrayList(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"@all\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">TextMessage</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;content)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>(content,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">false</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">上面的代码中，有个代码优化小细节，官方文档是使用 “@all” 字符串来表示 @全体成员的，但 “@all” 是一个魔法值，为了简化调用，我们将其封装为 mentionAll 布尔类型字段，并且在构造函数中自动转换为实际请求需要的字段。</p>\n<h3 data-tool=\"mdnice编辑器\" style=\"margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin-top: 1.2em;\"><span style=\"background-image: url(https://files.mdnice.com/koala-3.png); background-size: 100% 100%; background-repeat: no-repeat; display: inline-block; width: 16px; height: 15px; line-height: 15px; margin-bottom: -1px;\"></span><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 17px; font-weight: bold; display: inline-block; margin-left: 8px; color: #48b378;\">5、编写消息发送类</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">接下来，我们将编写一个消息发送类。在这个类中，定义了用于发送各种类型消息的方法，并且所有的方法都会依赖调用底层的 send 方法。send 方法的作用是通过向企微机器人的 webhook 地址发送请求，从而驱动企微机器人发送消息。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">以下是示例代码，有很多编码细节：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;\"><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">/**<br>&nbsp;*&nbsp;微信机器人消息发送器<br>&nbsp;*&nbsp;<span class=\"hljs-doctag\" style=\"color: #c678dd; line-height: 26px;\">@author</span>&nbsp;yuyuanweb<br>&nbsp;*/</span><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Slf</span>4j<br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Data</span><br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">RtxRobotMessageSender</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">final</span>&nbsp;String&nbsp;webhook;<br>&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;WebhookConfig&nbsp;webhookConfig;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">RtxRobotMessageSender</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;webhook)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.webhook&nbsp;=&nbsp;webhook;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;支持自定义消息发送<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">sendMessage</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Message&nbsp;message)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;Exception&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(message&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">instanceof</span>&nbsp;TextMessage)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TextMessage&nbsp;textMessage&nbsp;=&nbsp;(TextMessage)&nbsp;message;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;send(textMessage);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(message&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">instanceof</span>&nbsp;MarkdownMessage)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MarkdownMessage&nbsp;markdownMessage&nbsp;=&nbsp;(MarkdownMessage)&nbsp;message;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;send(markdownMessage);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;RuntimeException(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"Unsupported&nbsp;message&nbsp;type\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;发送文本（简化调用）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">sendText</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;content)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;Exception&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sendText(content,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">false</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">sendText</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;content,&nbsp;List&lt;String&gt;&nbsp;mentionedList,&nbsp;List&lt;String&gt;&nbsp;mentionedMobileList)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;Exception&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TextMessage&nbsp;textMessage&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;TextMessage(content,&nbsp;mentionedList,&nbsp;mentionedMobileList,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">false</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;send(textMessage);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;发送消息的公共依赖底层代码<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">send</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Message&nbsp;message)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;Exception&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;webhook&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.webhook;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;messageJsonObject&nbsp;=&nbsp;JSONUtil.toJsonStr(message);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;未传入配置，降级为从配置文件中寻找</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(StrUtil.isBlank(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.webhook))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;webhook&nbsp;=&nbsp;webhookConfig.getWebhook();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">catch</span>&nbsp;(Exception&nbsp;e)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.error(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"没有找到配置项中的webhook,请检查：1.是否在application.yml中填写webhook&nbsp;2.是否在spring环境下运行\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;RuntimeException(e);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OkHttpClient&nbsp;client&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;OkHttpClient();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RequestBody&nbsp;body&nbsp;=&nbsp;RequestBody.create(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MediaType.get(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"application/json;&nbsp;charset=utf-8\"</span>),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;messageJsonObject);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Request&nbsp;request&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;Request.Builder()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.url(webhook)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.post(body)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.build();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">try</span>&nbsp;(Response&nbsp;response&nbsp;=&nbsp;client.newCall(request).execute())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(response.isSuccessful())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.info(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"消息发送成功\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.error(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"消息发送失败，响应码：{}\"</span>,&nbsp;response.code());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;Exception(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"消息发送失败，响应码：\"</span>&nbsp;+&nbsp;response.code());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">catch</span>&nbsp;(IOException&nbsp;e)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.error(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"发送消息时发生错误:\"</span>&nbsp;+&nbsp;e);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;Exception(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"发送消息时发生错误\"</span>,&nbsp;e);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">代码部分就到这里，是不是也没有很复杂？</p>\n<h3 data-tool=\"mdnice编辑器\" style=\"margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin-top: 1.2em;\"><span style=\"background-image: url(https://files.mdnice.com/koala-3.png); background-size: 100% 100%; background-repeat: no-repeat; display: inline-block; width: 16px; height: 15px; line-height: 15px; margin-bottom: -1px;\"></span><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 17px; font-weight: bold; display: inline-block; margin-left: 8px; color: #48b378;\">6、SDK 打包</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">接下来就可以对 SDK 进行打包，然后本地使用或者上传到远程仓库了。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">SDK 的打包非常简单，通过 Maven 的 install 命令即可，SDK 的 jar 包就会被导入到你的本地仓库中。</p>\n<blockquote class=\"multiquote-1\" data-tool=\"mdnice编辑器\" style=\"border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: #FBF9FD; border-left: 3px solid #35b378; display: block;\">\n<p style=\"padding-bottom: 8px; padding-top: 1em; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);\">在打包前建议先执行 clean 来清理垃圾文件。</p>\n</blockquote>\n<figure data-tool=\"mdnice编辑器\" style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;\"><img src=\"https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/1697194173045-c3c994f0-9415-40f0-886a-5bc41cba9576.png\" alt style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 4px; margin-bottom: 25px;\"></figure>\n<h3 data-tool=\"mdnice编辑器\" style=\"margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px; margin-top: 1.2em;\"><span style=\"background-image: url(https://files.mdnice.com/koala-3.png); background-size: 100% 100%; background-repeat: no-repeat; display: inline-block; width: 16px; height: 15px; line-height: 15px; margin-bottom: -1px;\"></span><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 17px; font-weight: bold; display: inline-block; margin-left: 8px; color: #48b378;\">7、调用 SDK</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">最后我们来调用自己写的 SDK，首先将你的 SDK 作为依赖引入到项目中，比如我们的接水提醒应用。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">引入代码如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;\"><span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">dependency</span>&gt;</span><br>&nbsp;&nbsp;<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">groupId</span>&gt;</span>com.yupi<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;/<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">groupId</span>&gt;</span><br>&nbsp;&nbsp;<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">artifactId</span>&gt;</span>rtx-robot<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;/<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">artifactId</span>&gt;</span><br>&nbsp;&nbsp;<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;/<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">version</span>&gt;</span><br><span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;/<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">dependency</span>&gt;</span><br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">然后将之前复制的 webhook 写入到 Spring Boot 的配置文件中：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;\"><span class=\"hljs-attr\" style=\"color: #d19a66; line-height: 26px;\">wechatwork-bot:</span><br>&nbsp;&nbsp;<span class=\"hljs-attr\" style=\"color: #d19a66; line-height: 26px;\">webhook:</span>&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">你的webhook地址</span><br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">随后你就可以用依赖注入的方式得到一个消息发送者对象了：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;\"><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Resource</span><br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;RtxRobotMessageSender&nbsp;rtxRobotMessageSender;<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">当然你也可以选择在一个非 Spring 环境中手动创建对象，自己传入 webhook：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;\">String&nbsp;webhook&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"你的webhook地址\"</span>;<br>RtxRobotMessageSender&nbsp;rtxRobotMessageSender&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;RtxRobotMessageSender(webhook);<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">现在，就可以轻松实现我们之前提到的提醒接水工具了。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">这里我们就用最简单的方式，定义一个员工数组，分别对应到每周 X，然后用定时任务每日执行消息发送。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">示例代码如下：</p>\n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;\"><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Component</span><br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">WaterReminderTask</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Resource</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;RtxRobotMessageSender&nbsp;rtxRobotMessageSender;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">private</span>&nbsp;String[]&nbsp;names&nbsp;=&nbsp;{<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"员工a\"</span>,&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"员工b\"</span>,&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"员工c\"</span>,&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"员工d\"</span>,&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"员工e\"</span>};<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Scheduled</span>(cron&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"0&nbsp;55&nbsp;9&nbsp;*&nbsp;*&nbsp;MON-FRI\"</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">remindToGetWater</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LocalDate&nbsp;today&nbsp;=&nbsp;LocalDate.now();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DayOfWeek&nbsp;dayOfWeek&nbsp;=&nbsp;today.getDayOfWeek();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;nameToRemind;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">switch</span>&nbsp;(dayOfWeek)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">case</span>&nbsp;MONDAY:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nameToRemind&nbsp;=&nbsp;names[<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">0</span>];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">break</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">case</span>&nbsp;TUESDAY:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nameToRemind&nbsp;=&nbsp;names[<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">1</span>];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">break</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">case</span>&nbsp;WEDNESDAY:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nameToRemind&nbsp;=&nbsp;names[<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">2</span>];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">break</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">case</span>&nbsp;THURSDAY:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nameToRemind&nbsp;=&nbsp;names[<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">3</span>];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">break</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">case</span>&nbsp;FRIDAY:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nameToRemind&nbsp;=&nbsp;names[<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">4</span>];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">break</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">default</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;message&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"提醒：\"</span>&nbsp;+&nbsp;nameToRemind&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"，是你接水的时间了！\"</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rtxRobotMessageSender.sendText(message);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">好了，现在大家每天都有水喝了，真不错 \uD83D\uDC4D\uD83C\uDFFB</p>\n<figure data-tool=\"mdnice编辑器\" style=\"margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;\"><img src=\"https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/image-20231014154348045.png\" alt style=\"display: block; margin: 0 auto; max-width: 100%; border-radius: 4px; margin-bottom: 25px;\"></figure>\n<h2 data-tool=\"mdnice编辑器\" style=\"padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://files.mdnice.com/koala-2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 50px; margin-top: 1em; margin-bottom: 10px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"text-align: center; display: inline-block; height: 38px; line-height: 42px; color: #48b378; background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;\">最后</span><span class=\"suffix\"></span></h2>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">虽然开发企微机器人 SDK 并不难，但想做一个完善的、易用的 SDK 还是需要两把刷子的，而且沉淀 SDK 对自己未来做项目帮助会非常大。</p>\n<p data-tool=\"mdnice编辑器\" style=\"font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 1em; color: rgb(74,74,74); line-height: 1.75em;\">希望本文对大家有帮助，学会的话 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #28ca71;\">点个赞</code>  或 <code style=\"font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #28ca71;\">在看</code> 吧，谢谢大家~</p>\n</section>",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1601072287388278786/96q07KsA-640.png",
        "language": null,
        "viewNum": 6,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-11-13T08:47:50.000+00:00",
        "updateTime": "2023-11-14T01:22:22.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 2935,
          "coin": 170,
          "followeeNum": 1237,
          "followNum": 6,
          "followStatus": null,
          "vipExpireTime": "2024-05-24T03:35:38.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-11-14T00:48:18.000+00:00"
        },
        "tags": [
          "文章"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1723258050137157633",
        "title": "EasyExcel导出文件，并解决格式报错",
        "description": "项目中使用EasyExcel导出数据",
        "content": "# EasyExcel导出数据\n\n### 引入pom文件\n\n```xml\n<!-- easy-excel -->\n<dependency>\n\t<groupId>com.alibaba</groupId>\n\t<artifactId>easyexcel</artifactId>\n\t<version>3.2.1</version>\n</dependency>\n```\n\n### 定义导出对象\n\n```java\n/**\n * Excel订单信息导出\n *\n * @author 玄德\n */\n@Data\npublic class IndentExcelVO {\n\n    /**\n     * 订单编号\n     */\n    @ColumnWidth(20)\n    @NumberFormat(\"#\")\n    @ExcelProperty(value = \"订单编号\", index = 0)\n    private String id;\n\n    /**\n     * 用户姓名\n     */\n    @ExcelProperty(value = \"用户姓名\", index = 1)\n    private String realName;\n\n    /**\n     * 手机号\n     */\n    @ColumnWidth(15)\n    @ExcelProperty(value = \"手机号\", index = 2)\n    private String information;\n\n    /**\n     * 接亲日期\n     */\n    @ColumnWidth(15)\n    @ExcelProperty(value = \"接亲日期\", index = 3)\n    private String date_time;\n\n    /**\n     * 开始时间\n     */\n    @ColumnWidth(15)\n    @ExcelProperty(value = \"开始时间\", index = 4)\n    private String start_time;\n\n    /**\n     * 结束时间\n     */\n    @ColumnWidth(15)\n    @ExcelProperty(value = \"结束时间\", index = 5)\n    private String end_time;\n\n    /**\n     * 接亲地址\n     */\n    @ColumnWidth(20)\n    @ExcelProperty(value = \"接亲地址\", index = 6)\n    private String address;\n\n    /**\n     * 订单总金额\n     */\n    @NumberFormat(\"#\")\n    @ExcelProperty(value = \"订单总金额\", index = 7)\n    private Double amount;\n\n    /**\n     * 订单状态\n     */\n    @ExcelProperty(value = \"订单状态\", index = 8)\n    private String indent_state;\n\n    /**\n     * 支付状态\n     */\n    @ExcelProperty(value = \"支付状态\", index = 9)\n    private String payment_state;\n\n    /**\n     * 订单创建时间\n     */\n    @ColumnWidth(15)\n    @ExcelProperty(value = \"订单创建时间\", index = 10)\n    private String createTime;\n\n}\n```\n\n### 定义工具类\n\n```java\n/**\n * Excel工具类\n *\n * @author 玄德\n */\npublic class ExcelUtils {\n\n    /**\n     * 获取路径\n     *\n     * @return 当前路径\n     */\n    public static String getPath() {\n        return ExcelUtils.class.getResource(\"/\").getPath();\n    }\n\n    /**\n     * 创建新文件\n     *\n     * @param pathName 文件名\n     * @return 文件\n     */\n    public static File createNewFile(String pathName) {\n        File file = new File(getPath() + pathName);\n        if (file.exists()) {\n            file.delete();\n        } else {\n            if (!file.getParentFile().exists()) {\n                file.getParentFile().mkdirs();\n            }\n        }\n        return file;\n    }\n\n    /**\n     * 设置响应结果\n     *\n     * @param response    响应结果对象\n     * @param rawFileName 文件名\n     */\n    public static void setExcelResponseProp(HttpServletResponse response, String rawFileName) throws IOException {\n        //设置内容类型\n        response.setContentType(\"application/vnd.vnd.ms-excel\");\n        //设置编码格式\n        response.setCharacterEncoding(\"utf-8\");\n        //设置导出文件名称（避免乱码）\n        String fileName = URLEncoder.encode(rawFileName.concat(\".xlsx\"), \"UTF-8\");\n        // 设置响应头\n        response.setHeader(\"Content-disposition\", \"attachment;filename*=utf-8''\" + fileName);\n    }\n\n    /**\n     * Date转String\n     *\n     * @param date 日期\n     * @return 字符串\n     */\n    public static String dateToString(Date date) {\n        if (date == null) {\n            throw new BusinessException(ErrorCode.NOT_FOUND_ERROR);\n        }\n        // Date转换为String\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n        return sdf.format(date);\n    }\n\n}\n```\n\n### 编写接口\n\n```java\n/**\n * 订单信息导出\n */\n@GetMapping(\"/download\")\n@AuthCheck(mustRole = ADMIN_ROLE)\npublic void download(HttpServletResponse response) throws IOException {\n    // 获取数据，根据自身业务修改\n    List<Indent> data = indentService.list();\n    List<IndentExcelVO> indentList = data.stream().map(item -> {\n        IndentExcelVO indentExcelVO = new IndentExcelVO();\n        BeanUtils.copyProperties(item, indentExcelVO);\n        // Date转字符串\n        indentExcelVO.setDate_time(ExcelUtils.dateToString(item.getDate_time()));\n        indentExcelVO.setCreateTime(ExcelUtils.dateToString(item.getCreateTime()));\n        return indentExcelVO;\n    }).collect(Collectors.toList());\n    // 设置导出名称\n    ExcelUtils.setExcelResponseProp(response, \"订单信息\");\n    // 获取输出流名称\n    OutputStream outputStream = response.getOutputStream();\n    // 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭\n    EasyExcel.write(outputStream, IndentExcelVO.class)  // 对应实体类\n        .sheet(\"订单数据\")  // sheet页名称\n        .doWrite(indentList); // 导出的数据集合\n}\n```\n\n### 遇到的问题\n\n> 关于Date字段导出问题\n\n启动服务，调用接口，成功导出 Excel文件，但是文件没有数据，且报错：`Can not find ‘Converter‘ support class Date.`\n\n报错原因：导出 Excel 表格时候，默认不支持 DateTime 日期格式，所以需要指定 DateTime 类型的字段的日期格式。\n\n解决方式1：将Date转换为String\n\n```java\nList<IndentExcelVO> indentList = data.stream().map(item -> {\n    IndentExcelVO indentExcelVO = new IndentExcelVO();\n    BeanUtils.copyProperties(item, indentExcelVO);\n    // Date转字符串\n    indentExcelVO.setDate_time(ExcelUtils.dateToString(item.getDate_time()));\n    indentExcelVO.setCreateTime(ExcelUtils.dateToString(item.getCreateTime()));\n    return indentExcelVO;\n}).collect(Collectors.toList());\n```\n\n解决方式2：定义转换器\n\n**求个大佬给个解决方案，我试了好多都不好使**",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1619315874135638017/HdlWIEC9-刻晴.jpg",
        "language": null,
        "viewNum": 16,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1619315874135638017",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-11-11T08:35:10.000+00:00",
        "updateTime": "2023-11-14T02:26:34.000+00:00",
        "user": {
          "id": "1619315874135638017",
          "planetCode": "3107",
          "userName": "玄德ь",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIy5niakJdDic29CHcGmBkmCC0sIUSpAJ5Ekj0AyShem07ntFFsPoDWO9k9h6IRialATNvJN1ALjiaJ6w/132",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": null,
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 25,
          "coin": 100,
          "followeeNum": 1,
          "followNum": 3,
          "followStatus": null,
          "vipExpireTime": "2024-01-28T13:18:47.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-01-28T12:46:04.000+00:00",
          "updateTime": "2023-03-27T06:43:48.000+00:00"
        },
        "tags": [
          "文章",
          "Java",
          "后端"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1722941479623716865",
        "title": "后端项目经典分层架构介绍",
        "description": null,
        "content": "大家好，我是鱼皮。开发后端项目时，我们最常见的一种架构模式就是 `分层架构` 。\n\n所谓的分层架构，就是把系统自上而下分为多个不同的层，每一层都有特定的功能和职责，且只和自己的直接上层与直接下层 “打交道”。\n\n分层架构的优点是：每一层都有明确定义的职责，易于理解和维护；而且各层可以独立扩展，以适应不同的需求。\n\n所以分层架构也是最适合新手入门学习、并且实际开发中应用最多的架构。\n\n\n\n## 分层架构\n\n下面给大家一种 Java 企业级后端项目开发时常用的分层架构，一般从前端界面（表示层）发送的请求出发，需要经历接入层、控制层、业务逻辑层、通用业务层、数据访问层、系统资源层等。\n\n**表示层** 通常是指让用户交互和查看信息的前端界面，比如用户点击按钮后能够发送一个请求，也可以叫用户层、界面层等。\n\n发送请求后，会经过 **接入层** ，比如 Nginx 网关、或者其他中间件，对请求做一个预处理或转发，比如实现负载均衡。这一层不是必须存在的，通常更适用于中大型项目，前端也可以直接请求后端。\n\n接入层会将请求转发到 **控制层**（Controller），负责接受请求、调用业务逻辑层（Service）的代码实现功能、然后响应结果。控制层一般不建议写复杂的业务逻辑，尽量保持精简。\n\n接下来是 **业务逻辑层**（Service），负责处理复杂的业务逻辑，比如对请求数据进行校验、处理、调用数据访问层以将结果存到数据库中等，也是我们做系统时主要开发编码的部分。\n\n**通用业务层**（Manager、Module）是一种特殊的业务逻辑层，主要的作用是抽取了一些需要被多个业务调用的公共代码，比如上传文件到对象存储、鉴权等，从而实现复用。\n\n**数据访问层**（Dao / Mapper）负责操作底层的数据源，比如对数据库、文件、缓存等进行增删改查。\n\n最后是 **系统资源层** ，也可以叫基础设施层，包括各种基础服务、系统环境等，比如数据库、消息队列、Redis、文件存储、Linux 系统、Docker 等。复杂的基础设施可能还包括 K8S 容器资源编排、资源调度平台等。\n\n\n\n------\n\n\n\n需要注意的是，并不是所有的分层架构都需要这么划分，不同业务和团队可能有自己的分层选择与规范。\n\n比如我带大家开发的 [OJ 在线判题系统](https://yuyuanweb.feishu.cn/wiki/LhjxwgFjwiovTVk9w2vcJoj4nid) ，分层架构如下：\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/1697022742320-afe5d60d-b0ba-4b02-91a9-d5870021af16.png)\n\n\n\n## 示例项目结构\n\n基于分层架构，我们可以将项目按照特定的目录名（包名）来组织代码，比如：\n\n- controller：控制层\n- service：业务逻辑层\n- mapper：数据访问层\n- model：数据模型\n\n还可以按照业务或文件的类型来划分目录，比如：\n\n- constant：常量\n- annotation：注解类\n- common：公共类\n- config：配置类\n- job：任务\n- exception：异常处理相关\n- utils：工具类\n\n\n\n以之前带大家做过的 [寻爱网项目](https://wx.zsxq.com/dweb2/index/topic_detail/415521148215518) 为例，项目的目录结构如图：\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/1697023472138-1db5caf0-dfcf-4835-ad6c-c7ccc80584fd.png)\n\n\n\n## 其他知识\n\n1）计算机网络也是采用了经典的分层架构，OSI 七层参考模型中，把计算机网络自底向上分为了物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。每个层只处理特定的功能，比如数据传输、数据的路由；层与层之间通过接口（或者叫协议）进行通信。\n\n2）需要注意的是，我们常用的后端开发框架 Spring MVC 是基于 MVC（Model-View-Controller）设计模式构建的，而不能算是传统的分层架构。而且一般现在的项目中只使用 Spring MVC 作为整个项目的控制层，不过大多数用了 Spring MVC 框架的项目基本都使用了分层架构。\n\n\n\n## 实践\n\n想了解更多常见的后端架构设计，推荐阅读这篇文章：[架构设计，让网站支棱起来！](https://mp.weixin.qq.com/s/iE3iOhLwxwMYhilOyyf90Q)\n\n编程导航星球的所有后端项目基本都使用了经典分层架构，随便实践一个项目都能学会这种架构方式。\n\n\uD83D\uDC49\uD83C\uDFFB 编程导航原创项目教程系列：https://yuyuanweb.feishu.cn/wiki/SePYwTc9tipQiCktw7Uc7kujnCd",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1601072287388278786/Ne6GPX37-SCR-20231110-ozqh.jpeg",
        "language": null,
        "viewNum": 27,
        "thumbNum": 2,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-11-10T11:37:14.000+00:00",
        "updateTime": "2023-11-13T14:48:54.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 2935,
          "coin": 170,
          "followeeNum": 1237,
          "followNum": 6,
          "followStatus": null,
          "vipExpireTime": "2024-05-24T03:35:38.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-11-14T00:48:18.000+00:00"
        },
        "tags": [
          "文章"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1722905233866223618",
        "title": "遍历文件夹",
        "description": "Java后端 ，广度优先",
        "content": "\n\n遍历文件夹，文件,相当于代码模板\n\n这个是在写文件同步时提取出来的文件夹遍历，用的是广度优先遍历，如有需要可直接替换路径即可使用。\n\n```Java\nimport java.io.File;\nimport java.util.*;\n\npublic class Test {\n    public static void main(String[] args) {\n        //直接替换成自己本地路径即可使用\n        File root=new File(\"C:\\\\Users\\\\admin\\\\Desktop\\\\test\");\n        //判空\n        if(root==null) return;\n        //文件夹队列\n        Queue<File> fileQueue=new LinkedList<>();\n        //当前队列长度\n        int curQueueSize=0;\n        //当前文件\n        File cur;\n        //子文件集合\n        List<File> files;\n        //先将根'/'放入队列\n        fileQueue.offer(root);\n        while(fileQueue.size()>0){\n            //上一层的文件夹个数\n            curQueueSize=fileQueue.size();\n            //遍历上一层文件夹\n            while(curQueueSize>0){\n                curQueueSize--;\n                cur=fileQueue.peek();\n                fileQueue.poll();\n                //取出cur中的文件与文件夹\n                files= Arrays.asList(cur.listFiles());\n                int i=0;\n                while(files.size()>i){\n                    //判断是否为文件夹\n                    if(files.get(i).isDirectory()){\n                        //文件夹加入队列\n                        fileQueue.offer(files.get(i));\n                        //其他操作\n                        System.out.println(\"文件夹名：\"+files.get(i).getName());\n                    }else{\n                        //文件操作\n                        System.out.println(\"文件名：\"+files.get(i).getName());\n                    };\n                    i++;\n                }\n            }\n        }\n    }\n}\n\n```",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 10,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1673657502631202817",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-11-10T09:13:12.000+00:00",
        "updateTime": "2023-11-13T12:33:08.000+00:00",
        "user": {
          "id": "1673657502631202817",
          "planetCode": "25603",
          "userName": "暗黑暴杀龙王",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/a6UaNUYvN5qTiaiazIeORxC5iann9swNyMczrgool7CgQRJQIHfib78lhGZmqmsHM3aSV1GibvONHEoNC7ntJs6Jp4w/132",
          "gender": 1,
          "userProfile": "Java开发实习生",
          "userRole": "vip",
          "interests": [],
          "place": "北京市西城区",
          "birthday": "2001-07-16",
          "school": "河北师范大学",
          "major": "计算机科学与技术",
          "education": "一本",
          "graduationYear": 2024,
          "jobStatus": "实习中",
          "company": "币码网络",
          "job": "后端",
          "workYear": 0,
          "direction": "后端",
          "goal": "校招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-08-03T08:00:25.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-27T11:40:18.000+00:00",
          "updateTime": "2023-11-10T09:11:49.000+00:00"
        },
        "tags": [
          "文章",
          "Java"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1721906688879095810",
        "title": "Bean 拷贝之 MapStruct",
        "description": "一文简单介绍 Bean 高效拷贝工具 MapStruct",
        "content": "今天我在实验室看到了大佬写 Bean 拷贝的时候，意外地发现了他实现 Bean 拷贝的策略是使用 get 和 set 方法，有强迫症的我实在看不下去了。今天就给大家带来一个 Bean 拷贝的高效工具，MapSrtuct 。有人会问 MapSturct 是什么？简单来说，MapStruct 就是一个 Java Bean 的映射器，我们只需要在一个 XXXStructMapper 的接口中定义好方法，MapStruct 就会在编译的时候生成相应的实现类，这个实现类中包含了具体的映射代码，极大地提高了我们编码的效率，省去了大量的模板代码。\n\n\n\n\n\n\n\n1. 传统写法带来的困扰\n\n\n\n\n假如没有使用 MapStruct 的话，当我们需要把 DO 对象转成一个 DTO 对象时，我们需要这样做。\n\npublic static ArticleDTO toDto(ArticleDO articleDO) {\n    if (articleDO == null) {\n        return null;\n    }\n    ArticleDTO articleDTO = new ArticleDTO();\n    articleDTO.setAuthor(articleDO.getUserId());\n    articleDTO.setArticleId(articleDO.getId());\n    articleDTO.setArticleType(articleDO.getArticleType());\n    articleDTO.setTitle(articleDO.getTitle());\n    articleDTO.setShortTitle(articleDO.getShortTitle());\n    articleDTO.setSummary(articleDO.getSummary());\n    articleDTO.setCover(articleDO.getPicture());\n    articleDTO.setSourceType(SourceTypeEnum.formCode(articleDO.getSource()).getDesc());\n    articleDTO.setSourceUrl(articleDO.getSourceUrl());\n    articleDTO.setStatus(articleDO.getStatus());\n    articleDTO.setCreateTime(articleDO.getCreateTime().getTime());\n    articleDTO.setLastUpdateTime(articleDO.getUpdateTime().getTime());\n    articleDTO.setOfficalStat(articleDO.getOfficalStat());\n    articleDTO.setToppingStat(articleDO.getToppingStat());\n    articleDTO.setCreamStat(articleDO.getCreamStat());\n\n    // 设置类目id\n    articleDTO.setCategory(new CategoryDTO(articleDO.getCategoryId(), null));\n    return articleDTO;\n}\n\n\n如果是需要批量进行转化的话，这个时候还需要遍历进行批量转化。\n\npublic static List<ArticleDTO> toArticleDtoList(List<ArticleDO> articleDOS) {\n    return articleDOS.stream().map(ArticleConverter::toDto).collect(Collectors.toList());\n}\n\n\n这样的代码如果只是一个方法可能还好，但是如果写多了，你就会发现代码不是很优雅，而且每次写代码量还巨大，虽然有插件可以帮你写，但是感觉还是不好，这个时候，肯定有人会说用 BeanUtils，这个时候我会给你大大的一巴掌，主要是 BeeanUtils 其可能会踩一些坑，你可能把握不是很好，这里我找了一些关于 BeanUtils 的一些文章，感兴趣的同学可以一起看看：\n\nSpring的BeanUtils.copyProperties()避坑指南：https://juejin.cn/post/7012279747526787080\n\n几个 BeanUtils 中的坑，千万别踩！https://cloud.tencent.com/developer/article/1522266\n\nSpringBoot 整合mapstruct|赶紧丢掉BeanUtils吧：https://juejin.cn/post/7035161765948162078\n\n\n\n\n\n\n\n那有什么简单的解决方法，那就是我们今天的主角， MapStruct 了，接下来我们简单使用一下 MapStruct演示一下。\n\n@Mapper\npublic interface ArticleStructMapper {\n    ArticleStructMapper INSTANCE = Mappers.getMapper(ArticleStructMapper.class );\n\n    ArticleDTO toDTO(ArticleDO do);\n}\n定义了一个接口 ArticleStructMapper，该接口的主要作用是将 ArticleDO 对象转换为 ArticleDTO 对象。\n\n\n\n让我们一步步地分析代码：\n\n   1.@Mapper：\n\n\n\n这是 MapStruct 的核心注解之一。它标记了这个接口为一个映射器，并告诉 MapStruct 的注解处理器在编译时为此接口生成实现。\n\n\n\n  2.INSTANCE 常量\n\n\n\nArticleStructMapper INSTANCE = Mappers.getMapper( ArticleStructMapper.class );\nMappers.getMapper 是 MapStruct 提供的一个工具方法，用于在不使用 Spring 或其他依赖注入框架的情况下获取映射器的实例。\n\n\n\n 3.toDTO 方法：\n\n\n\n这个方法定义了一个转换。这个大家都懂，我就不做过多的赘述了。\n\n\n\n\n\n\n\n\n\n2. MapStruct 的用法\n\n\n\n\n\n\n\n\n2.1. 引入依赖\n\n\n\n\n在 pom.xml 文件中引入 MapStruct 的 Maven 坐标,这里需要注意，引入 guava 的时候需要注意版本冲突问题，尽量引入大于 19.0 以上的版本，不然可能会报错。\n\n<!-- 引入 mapstruct -->\n<dependency>\n    <groupId>org.mapstruct</groupId>\n    <artifactId>mapstruct</artifactId>\n \t<version>1.5.5.Final</version>\n</dependency>\n<dependency>\n    <groupId>org.mapstruct</groupId>\n    <artifactId>mapstruct-processor</artifactId>\n\t <version>1.5.5.Final</version>\n</dependency>\n它们的作用如下：\n\norg.mapstruct:mapstruct： \nMapStruct 的核心库。它提供了 MapStruct 所需的主要注解和工具方法，例如 @Mapper, @Mapping 等注解以及 Mappers.getMapper() 方法。\n在运行时，这个库是必需的，生成的映射代码会依赖它。\norg.mapstruct:mapstruct-processor： \nMapStruct 的注解处理器。它在编译时生成具体的映射实现代码。\ncompile 作用域，意味着它只在编译时被使用。\n当你编译一个使用了 MapStruct 注解的项目时，注解处理器会检测你的代码，然后为你的 @Mapper 注解的接口或抽象类生成实现。\n\n\n\n\n2.2. 定义映射器接口\n\n\n\n\n像前面大家看到的 ArticleStructMapper 接口，我们稍微来一个复杂的。这里需要注意导入的 Mapper，是 MapStruct 的 Mapper ，而不是 MyBatis 下的 Mapper。\n\n@Mapper\npublic interface ColumnStructMapper {\n    ColumnStructMapper INSTANCE = Mappers.getMapper( ColumnStructMapper.class );\n\n    /**\n     * ColumnInfoDO to ColumnDTO\n     * @param columnInfoDO\n     * @return\n     */\n    // sources 是参数，target 是目标\n    @Mapping(source = \"id\", target = \"columnId\")\n    @Mapping(source = \"columnName\", target = \"column\")\n    @Mapping(source = \"userId\", target = \"author\")\n    // Date 转 Long\n    @Mapping(target = \"publishTime\", expression = \"java(columnInfoDO.getPublishTime().getTime())\")\n    @Mapping(target = \"freeStartTime\", expression = \"java(columnInfoDO.getFreeStartTime().getTime())\")\n    @Mapping(target = \"freeEndTime\", expression = \"java(columnInfoDO.getFreeEndTime().getTime())\")\n    ColumnDTO infotoDto(ColumnInfoDO columnInfoDO);\n\n    List<ColumnDTO> infoToDtos(List<ColumnInfoDO> columnInfoDOs);\n\n    @Mapping(source = \"column\", target = \"columnName\")\n    @Mapping(source = \"author\", target = \"userId\")\n    // Long 转 Date\n    @Mapping(target = \"freeStartTime\", expression = \"java(new java.util.Date(req.getFreeStartTime()))\")\n    @Mapping(target = \"freeEndTime\", expression = \"java(new java.util.Date(req.getFreeEndTime()))\")\n    ColumnInfoDO toDo(ColumnReq req);\n}\n这段代码定义了如何在 ColumnInfoDO 和 ColumnDTO 之间转换，以及如何从 ColumnReq 转换到 ColumnInfoDO。我将为你分析其每一部分：\n\n1.infotoDto 方法\n\n使用 @Mapping 注解来指定属性映射规则。例如，将 ColumnInfoDO 的 id 属性映射到 ColumnDTO 的 columnId 属性。\n使用 expression 属性来定义更复杂的属性转换，例如从 Date 对象获取时间戳。\n2.infoToDtos 方法\n\n显示了 MapStruct 如何轻松地转换对象列表。此方法将 List<ColumnInfoDO> 转换为 List<ColumnDTO>。因为单个对象的映射已经在 infotoDto 方法中定义，所以这里不需要额外的注解。\n\n3. toDo 方法\n\n对于 freeStartTime 和 freeEndTime，因为它们在 ColumnReq 中是 Long 类型的时间戳，而在ColumnInfoDO 中是 Date 类型，所以使用了 expression 属性进行转换。\n\n\n\n\n\n\n\n\n\n@Mapping 注解 \n\n\n\n\n\n\n这里重点说一下 @Mapping 注解，当两个对象中的字段名或者字段类型不一致的时候，就需要该注解来进行转换。\n\n\n\n换句话说，如果对象的字段名/类型完全一样，就完全不需要该注解，Mapstruct 会自动拷贝。\n\n\n\n比如说 SimpleSource 和 SimpleDestination 的字段名和类型完全一样：\n\npublic class SimpleSource {\n    private String name;\n    private String description;\n    // getters and setters\n}\n \npublic class SimpleDestination {\n    private String name;\n    private String description;\n    // getters and setters\n}\n就只需要定义映射器 SimpleSourceDestinationMapper 就行了。\n\n@Mapper\npublic interface SimpleSourceDestinationMapper {\n    SimpleSourceDestinationMapper INSTANCE = Mappers.getMapper(SimpleSourceDestinationMapper.class);\n    SimpleDestination sourceToDestination(SimpleSource source);\n    SimpleSource destinationToSource(SimpleDestination destination);\n}\n\n\n用的时候，可以这样 SimpleSourceDestinationMapper.INSTANCE 进行转换。\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringBootTest(classes = QuickForumApplication.class)\npublic class SimpleSourceDestinationMapperIntegrationTest {\n\n    @Test\n    public void givenSourceToDestination_whenMaps_thenCorrect() {\n        SimpleSource simpleSource = new SimpleSource();\n        simpleSource.setName(\"沉默王二\");\n        simpleSource.setDescription(\"是条狗\");\n        SimpleDestination destination = SimpleSourceDestinationMapper.INSTANCE.sourceToDestination(simpleSource);\n        assertEquals(simpleSource.getName(), destination.getName());\n        assertEquals(simpleSource.getDescription(), destination.getDescription());\n    }\n}\n\n\nOK，回到 @Mapping 注解。 \n\n@Mapping 是 MapStruct 中用于定义字段之间映射规则的注解。它非常灵活，能够处理各种复杂的映射情况。以下是 @Mapping 的一些常见用法：\n\n\n\n1.基本映射：\n\n通过指定 source 和 target 来映射源对象的属性到目标对象的属性。\n\n@Mapping(source = \"name\", target = \"fullName\")\n这将源对象的 name 属性映射到目标对象的 fullName 属性。\n\n\n\n2.常量映射\n\n可以将目标字段设置为固定的常量值。\n\n@Mapping(target = \"status\", constant = \"ACTIVE\")\n这会将目标对象的 status 属性设置为 \"ACTIVE\"。\n\n3.默认值\n\n当源属性为 null 时，可以为目标属性设置默认值。\n\n@Mapping(source = \"count\", target = \"total\", defaultValue = \"0\")\n如果 count 为 null，则 total 将被设置为 \"0\"。\n\n\n\n4.表达式\n\n对于需要更复杂的转换逻辑，可以使用 Java 表达式。\n\n@Mapping(target = \"timestamp\", expression = \"java(source.getDate().getTime())\")\n\n\n5.日期格式\n\n对于日期和字符串之间的映射，可以指定日期格式。\n\n@Mapping(source = \"date\", target = \"formattedDate\", dateFormat = \"yyyy-MM-dd\")\n这会将 Date 对象转换为 \"yyyy-MM-dd\" 格式的字符串。\n\n\n\n6.条件映射\n\n使用 qualifiedByName 或 qualifiedBy 来指定一个条件方法或注解，这些方法/注解决定是否应该进行映射。\n\n@Mapping(source = \"value\", target = \"data\", qualifiedByName = \"specialConverter\")\n这里，映射会使用名为 specialConverter 的方法进行。\n\n\n\n7.嵌套映射\n\n当处理嵌套对象时，可以使用点表示法。\n\n@Mapping(source = \"address.street\", target = \"streetName\")\n这会将源对象中的 address 对象的 street 属性映射到目标对象的 streetName 属性。\n\n\n\n8.忽略映射\n\n在某些情况下，可能不希望特定的属性被映射，可以使用 ignore。\n\n@Mapping(target = \"internalId\", ignore = true)\n这会确保目标对象的 internalId 属性不被设置。\n\n\n\n9.使用自定义映射方法\n\n可以指定自定义方法来进行映射。\n\n@Mapping(target = \"data\", source = \"value\", qualifiedByName = \"customMethod\")\n\n\n\n\n\n\n\n\nSpring 依赖注入\n\n\n\n\n截止到目前为止，我们一直在使用 Mappers.getMapper 来获取映射器 INSTANCE。\n\nColumnStructMapper INSTANCE = Mappers.getMapper( ColumnStructMapper.class);\n\n\n\n\n如果是在 Spring 环境下，还可以在 @Mapper 注解中添加 componentModel = \"spring\" 参数来告诉 MapStruct 在生成映射实现类的时候，提供 Spring 依赖注入。\n\n@Mapper(componentModel = \"spring\")\npublic interface ColumnStructMapper {}\n\n\n\n\n这样我们在使用映射器的时候，可以直接通过 @Autowired 注解来注入 ColumnStructMapper 对象，然后就可以直接这样使用。\n\n@Autowired\nprivate ColumnStructMapper columnStructMapper;\nColumnInfoDO columnInfoDO = columnStructMapper.toDo(req);\n\n\n这样就不需要在映射器接口中添加 INSTANCE 了。\n\n\n\n\n\n\n\n\n\n3. MapStruct 插件\n\n\n\n\n如果你在 Intellij IDEA 中安装 MapStruct 插件的话，直接在插件市场搜 MapStruct 关键字就可以了。\n\n\n\n\n\n\n\n\n\n\n\n安装完成后，可以直接在 @Mapper 接口和它的实现类之间快速导航。\n\n\n\n\n\n\n\n\n\n\n\n比如说点击上图中的跳转小图标，就可以直接到实现类。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4. MapStruct 的背后原理\n\n\n\n\nJava 程序执行的过程，是由编译器先把 java 文件编译成 class 字节码文件，然后由 JVM 去解释执行 class 文件。\n\n\n\nMapstruct 正是在 java 文件到 class 这一步帮我们实现了转换方法，即做了预处理，提前编译好文件，用过 lombok 的小伙伴一定能理解其好处。\n\n\n\n首先我们来看最简单的 SimpleSourceDestinationMapper，它是这样定义的。\n\n\n\n@Mapper\npublic interface SimpleSourceDestinationMapper {\n    SimpleSourceDestinationMapper INSTANCE = Mappers.getMapper(SimpleSourceDestinationMapper.class);\n    \n    SimpleDestination sourceToDestination(SimpleSource source);\n    \n    SimpleSource destinationToSource(SimpleDestination destination);\n}\n\n\n其在编译后会生成两个文件 SimpleSourceDestinationMapper 和 SimpleSourceDestinationMapperImpl。\n\n\n\n\n\n通过终端可以看到 class 文件的后缀。\n\n\n\n\n\n\n\n\n\n\n\nOK，我们直接来看 class 文件的内容，当然是反编译后的，Intellij IDEA 可以直接打开，先是 SimpleSourceDestinationMapper。\n\n\n\n\n\n\n\n\n\n\n\n再来看实现类 SimpleSourceDestinationMapperImpl，我们直接贴反编译后的代码。\n\npublic class SimpleSourceDestinationMapperImpl implements SimpleSourceDestinationMapper {\n    public SimpleSourceDestinationMapperImpl() {\n    }\n\n    public SimpleDestination sourceToDestination(SimpleSource source) {\n        if (source == null) {\n            return null;\n        } else {\n            SimpleDestination simpleDestination = new SimpleDestination();\n            simpleDestination.setName(source.getName());\n            simpleDestination.setDescription(source.getDescription());\n            return simpleDestination;\n        }\n    }\n\n    public SimpleSource destinationToSource(SimpleDestination destination) {\n        if (destination == null) {\n            return null;\n        } else {\n            SimpleSource simpleSource = new SimpleSource();\n            simpleSource.setName(destination.getName());\n            simpleSource.setDescription(destination.getDescription());\n            return simpleSource;\n        }\n    }\n}\n\n\n其实内容和我们直接去写 Converter 是一样的，通过 new 创建一个对象，然后通过 set 方法进行赋值。\n\n\n\n如果是 @Mapper(componentModel = \"spring\") 的话，在生成的时候，会带上 @Component 注解。 \n\n\n\n\n\n\n\n使用 @Component 注解的类将会在 Spring 的组件扫描期间被检测并注册到 ApplicationContext 中，从而使其成为一个 Spring Bean。\n\n\n\n这也是为什么我们可以直接通过 @Autowired 注解获得映射器对象的原因。 \n\n\n\n由于 MapStruct 并不是在运行时使用 Java 反射来实现对象之间的映射，而是在编译时生成明确、简单、易于跟踪的普通 Java 代码。这意味着它的执行速度更快，因为没有运行时的反射开销，并且可以避免与反射相关的各种问题。",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1627889630378479618/yoJAi3Hi-b64da6adly1h0xr5tuywrj20j60brdgh.jpeg",
        "language": null,
        "viewNum": 8,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1627889630378479618",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-11-07T15:05:20.000+00:00",
        "updateTime": "2023-11-10T02:51:11.000+00:00",
        "user": {
          "id": "1627889630378479618",
          "planetCode": "2784",
          "userName": "答案说明所有",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1627889630378479618/FYBQxM7a-Screenshot_20230717_113840.jpg",
          "gender": 1,
          "userProfile": "目标大厂，冲冲冲！",
          "userRole": "vip",
          "interests": [],
          "place": "广东",
          "birthday": "2023-05-12",
          "school": "广东石油化工学院",
          "major": "数据科学与大数据技术",
          "education": null,
          "graduationYear": 2025,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "大数据",
          "goal": "实习",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-02-21T22:27:34.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-02-21T04:35:07.000+00:00",
          "updateTime": "2023-07-21T07:43:28.000+00:00"
        },
        "tags": [
          "文章"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1721207549677662209",
        "title": "几分钟时间带你了解一下云计算",
        "description": "简单讲述一下云计算是什么，以及云计算有哪些特点？",
        "content": "# 几分钟时间带你了解一下云计算\n\n---\n\n云计算”这个名词相信大家一定不是很陌生了，可以说每个人多多少少都会听过云计算这个名词，更别说我们这些日常与计算机打交道的码农们了，那我现在问你一个问题，什么是云计算，以及它有什么东西，相信这个时候，各位程序员们已经开始汗流浃背了吧【手动狗头】，再既然这样，我也不调侃你们了，今天这篇文章，我们就来简单介绍一下云计算。\n\n## 1. 什么是云计算?\n\n第一个问题我们就来剖析一下，什么是云计算，如果你要了解什么是云计算，你首先就要了解一件事情，**什么是云**？只要理解了这个问题，接下里的部分就很简单了。\n\n### 什么是云？\n\n首先我们来想一想云为什么会产生，这个原因很简单，其出现肯定是为了方便企业的开发，提高开发效率的。那为什么企业不自己搭建呢，这就到点上了，因为企业自己搭建服务器的耗费非常得大，这个时候，就有人想到了，“**既然我们自己搭建的成本很大，那么我们能不能通过租用的方式呢？**”，我们就把自己的数据以及计算服务全都放在供应商提供的远端服务器上。这不就可以了。事实证明，这个点是可行的，然后这种**远端提供的基础设施就是我们所说的“云”**。\n\n“云”上面的资源在用户看来，其是一个可以拓展的，并且可以随时获取的，且可以实现**按需使用，随时扩展**。根据自己的需要进行选择使用，然后进行付费。\n\n\n\n### 什么是云计算？\n\n在理解了“云”的概念之后之后，云计算就很容易理解了，所谓云计算，就是**将****计算服务与数据存储服务作为一种商品进行售卖或者租赁，购买后可以在云端提供服务。**\n\n\n\n有了云计算之后，无论是企业还是个人，如果想要搭建自己的网站或者软件平台，都不需要自己搭建服务器，可以直接通过租用企业的云服务器的方式，调用云端的计算资源，直接实现平台的搭建。这种方式不需要你搭建服务器，只需要根据你的需要进行服务器资源的购买就可以了，这样的话，就大大提高了工作的效率，而且如果自己搭建服务器的话，服务器的维护是需要成本的，这种方式还可以减低开发成本。\n\n## 2. 云计算有什么特点？\n\n上面说完了什么是云计算，接下来就简单说一下，云计算有什么特点？\n\n- **虚拟化技术**\n\n在计算机中，虚拟化（英语：Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以更好的应用这些资源。这些资源的新虚拟部分是不受现有资源的架设方式，地域或物理组态所限制。\n一般需要进行虚拟化的资源正是云计算中的计算能力和存储服务。在云计算的应用中，主要包含硬件虚拟化、平台虚拟化、应用程序虚拟化等。\n\n- **动态可扩展**\n\n云计算具有高效的运算能力，在原有服务器基础上增加云计算功能能够使计算速度迅速提高，最终实现动态扩展虚拟化的层次达到对应用进行扩展的目的。\n\n- **按需部署**\n\n计算机包含了许多应用、程序软件等，不同的应用对应的数据资源库不同，云计算平台能够根据用户的需求快速配备计算能力及资源。\n\n- **高灵活性**\n\n目前市场上大多数IT资源、软、硬件都支持虚拟化，比如存储网络、操作系统和开发软、硬件等。虚拟化要素统一放在云系统资源虚拟池当中进行管理，可见云计算的兼容性非常强，不仅可以兼容低配置机器、不同厂商的硬件产品，还能够外设获得更高性能计算。\n\n- **高可靠性**\n\n倘若服务器故障也不影响计算与应用的正常运行。因为单点服务器出现故障可以通过虚拟化技术将分布在不同物理服务器上面的应用进行恢复或利用动态扩展功能部署新的服务器进行计算。\n\n- **高性价比**\n\n用户可以利用应用软件的快速部署条件来更为简单快捷的将自身所需的已有业务以及新业务进行扩展。\n\n- **可拓展性**\n\n虽然都是使用云计算，但是不同的用户需要的服务是不一样的，有些公司可能只需要租借服务器、有些公司可能需要整套服务，而有些个人客户可能希望直接可以通过付费得到一个网站等。\n\n所以，根据服务类型的不同，云计算可以分为三类，即基础设施即服务(IaaS)、平台即服务(PaaS)和软件即服务(SaaS)。这3种云计算服务有时称为云计算堆栈，因为它们构建堆栈，它们位于彼此之上。",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1627889630378479618/Uy03nSDo-search.jpg",
        "language": null,
        "viewNum": 29,
        "thumbNum": 3,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1627889630378479618",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-11-05T16:47:12.000+00:00",
        "updateTime": "2023-11-13T08:22:36.000+00:00",
        "user": {
          "id": "1627889630378479618",
          "planetCode": "2784",
          "userName": "答案说明所有",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1627889630378479618/FYBQxM7a-Screenshot_20230717_113840.jpg",
          "gender": 1,
          "userProfile": "目标大厂，冲冲冲！",
          "userRole": "vip",
          "interests": [],
          "place": "广东",
          "birthday": "2023-05-12",
          "school": "广东石油化工学院",
          "major": "数据科学与大数据技术",
          "education": null,
          "graduationYear": 2025,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "大数据",
          "goal": "实习",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-02-21T22:27:34.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-02-21T04:35:07.000+00:00",
          "updateTime": "2023-07-21T07:43:28.000+00:00"
        },
        "tags": [
          "文章",
          "云计算",
          "后端",
          "Java"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      }
    ],
    "total": "193",
    "size": "8",
    "current": "1",
    "orders": [],
    "optimizeCountSql": true,
    "searchCount": true,
    "countId": null,
    "maxLimit": null,
    "pages": "25"
  },
  "message": "ok"
}